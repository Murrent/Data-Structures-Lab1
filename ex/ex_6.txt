// Martin Vickgren, Samson Tesfalem
Queue

As we enqueue the personal number into the queue list the first node will be regarded as both head and tail. 
When we add a new node the first node will be head and the second will be the tail. 
Which means that every time we add a new node it will be regarded as tail.
When we dequeue the head which was the first node in the queue list will be removed and the previous node to the head will be assigned as the new head.

Implementation of the queue is in queue.h and queue.c, it uses the linked list from list.h and list.c.
In queue.h we define structure of queue and functions which are used in queue.c.
The struct of node and list in list.h also used in a queue.

To make an executable file we used CMakeLists.txt
The CMakeLists.txt looked like this: 

	cmake_minimum_required(VERSION 3.17)
	project(lab1_algorithm C)

	set(CMAKE_C_STANDARD 99)

	add_executable(queueTest src/tests/queueTest.c src/list/list.h src/list/list.c src/queue/queue.h src/queue/queue.c)

Stack

Unlike in a queue where the tail is the latest added node, in the stack the head is the latest node and tail is the first node.
Which means when we use the pop function the head with the latest node is deleted.

Implementation of the stack is in stack.h and stack.c which uses the linked list from list.h and list.c.

To make an executable file we used CMakeLists.txt
The CMakeLists.txt looked like this: 

	cmake_minimum_required(VERSION 3.17)
	project(lab1_algorithm C)

	set(CMAKE_C_STANDARD 99)

	add_executable(stackTest src/tests/stackTest.c src/list/list.h src/list/list.c src/stack/stack.h src/stack/stack.c)
